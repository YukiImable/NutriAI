# -*- coding: utf-8 -*-
"""capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1InQqWUdCZHMQ6-EQ5rw13mBzLDjnA2AT

# Sistem Klasifikasi Biner - NutriAI

Loading kaggle.json
"""

from google.colab import files
import os
import shutil

# Membuat folder .kaggle jika belum ada
os.makedirs(os.path.expanduser("~/.kaggle"), exist_ok=True)

# Memindahkan kaggle.json ke ~/.kaggle
shutil.move("kaggle.json", os.path.expanduser("~/.kaggle/kaggle.json"))

# Memberikan permission ke file tersebut
!chmod 600 ~/.kaggle/kaggle.json

"""Mengimport & menunzip dataset dari kaggle"""

# Download kaggle dataset and unzip the file
!kaggle datasets download -d nanditapore/healthcare-diabetes
!unzip healthcare-diabetes.zip

"""# Data Understanding

## EDA

Fitur-fitur dataset dan deskripsinya :
- Id: Identifikasi unik untuk setiap entri data.
- Pregnancies: Jumlah kehamilan yang pernah dialami.
- Glucose: Konsentrasi glukosa plasma selama 2 jam dalam tes toleransi glukosa oral.
- BloodPressure: Tekanan darah diastolik (dalam mm Hg).
- SkinThickness: Ketebalan lipatan kulit triceps (dalam mm).
- Insulin: Kadar insulin serum setelah 2 jam (dalam mu U/ml).
- BMI: Indeks massa tubuh (berat badan dalam kg dibagi kuadrat tinggi badan dalam meter).
- DiabetesPedigreeFunction: Fungsi silsilah diabetes, yaitu skor genetik yang menunjukkan kemungkinan seseorang mengidap diabetes berdasarkan riwayat keluarga.
- Age: Usia dalam tahun.
- Outcome: Klasifikasi biner yang menunjukkan ada (1) atau tidak adanya (0) diabetes.
"""

import pandas as pd
from IPython.display import display

# df = pd.read_csv('Healthcare-Diabetes.csv')
df = pd.read_csv('Healthcare-Diabetes.csv')

display(df.head())

df.info()

# Menampikan statistik dataset
df.describe(include='all')

print("Missing values in total:")
print(df.isnull().sum())

# Menampilkan data duplikat
duplicate_rows = df[df.duplicated()]
print("Jumlah duplikat:", duplicate_rows.shape[0])

"""# Pre-processing Data"""

# Membuat rule label
df['Hipoglikemia'] = (df['Glucose'] < 70).astype(int)
df['Hiperglikemia'] = (df['Glucose'] > 140).astype(int)
df['Rendah_TekananDarah'] = (df['BloodPressure'] < 60).astype(int)
df['Obesitas'] = (df['BMI'] > 30).astype(int)
df['Underweight'] = (df['BMI'] < 18.5).astype(int)
df['Rendah_Insulin'] = (df['Insulin'] < 16).astype(int)

# Mendefinisikan fitur yang akan digunakan sebagai input model
features = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
            'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']

# Mendefinisikan label (target) yang ingin diprediksi/modelkan
labels = ['Hipoglikemia', 'Hiperglikemia', 'Rendah_TekananDarah',
          'Obesitas', 'Underweight', 'Rendah_Insulin']

# Membentuk matriks X berisi nilai-nilai fitur
X = df[features].values

# Membentuk matriks y berisi nilai-nilai label
y = df[labels].values

"""Melakukan normalisasi fitur menggunakan StandardScaler dan membagi dataset menjadi data latih dan data uji dengan perbandingan 80:20 secara acak menggunakan train_test_split."""

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV

# Normalize Features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split Dataset
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42)

"""# Modeling

Membuat target multi-label berdasarkan aturan kondisi kesehatan dari fitur seperti Glucose, BloodPressure, dan BMI, lalu mendefinisikan fitur input dan label target untuk model prediksi multi-label.

- Hipoglikemia: Glucose < 70
- Hiperglikemia: Glucose > 140
- Rendah_TekananDarah: BloodPressure < 60
- Obesitas: BMI > 30
- Underweight: BMI < 18.5
- Rendah_Insulin: Insulin < 16

membangun model Multi-Layer Perceptron (MLP) dengan beberapa lapisan Dense dan Dropout untuk klasifikasi multi-label, menggunakan aktivasi sigmoid pada output dan loss binary crossentropy untuk pelatihan.
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Membuat model neural network multilabel dengan layer dense dan dropout
model = Sequential([
    Dense(128, activation='relu', input_shape=(X.shape[1],)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dense(len(labels), activation='sigmoid')
])

# Mengkompilasi model dengan optimizer Adam dan loss binary crossentropy
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

"""Training Model"""

# Training
history = model.fit(
    X_train, y_train,
    epochs=50,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)

"""Visualisasi grafik loss selama pelatihan dan validasi model menggunakan matplotlib untuk memantau performa training dari waktu ke waktu."""

import matplotlib.pyplot as plt

# Menampilkan grafik loss selama training dan validasi untuk memantau performa model tiap epoch
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.title('Training & Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Binary Crossentropy')
plt.legend()
plt.grid(True)
plt.show()

"""Mengevaluasi model pada data uji dengan menghitung akurasi dan menampilkan classification report lengkap untuk setiap label multi-label setelah melakukan thresholding pada prediksi probabilitas."""

from sklearn.metrics import classification_report
import numpy as np

# Membuat prediksi probabilitas dari model untuk data uji
y_pred = model.predict(X_test)

# Mengonversi probabilitas prediksi menjadi nilai biner dengan threshold 0.5
y_pred_binary = (y_pred > 0.5).astype(int)

# Menampilkan laporan evaluasi klasifikasi untuk setiap label berdasarkan prediksi biner
print(classification_report(y_test, y_pred_binary, target_names=labels))

"""# Inferensi Sederhana

Membuat fungsi untuk memberikan rekomendasi nutrisi dan kesehatan berdasarkan prediksi kondisi dengan threshold tertentu
"""

def make_recommendation(prediction, threshold=0.5):
    labels = ['Hipoglikemia', 'Hiperglikemia', 'Rendah Tekanan Darah',
              'Obesitas', 'Underweight', 'Rendah Insulin']
    rekomendasi = []
    for i, val in enumerate(prediction):
        if val >= threshold:
            if labels[i] == 'Hipoglikemia':
                rekomendasi.append("Kadar gula darah rendah : Konsumsi makanan sumber karbohidrat kompleks.")
            elif labels[i] == 'Hiperglikemia':
                rekomendasi.append("Kadar gula darah tinggi : Kurangi konsumsi gula dan karbohidrat cepat serap.")
            elif labels[i] == 'Rendah Tekanan Darah':
                rekomendasi.append("Tekanan darah rendah : Tambahkan asupan cairan dan garam sesuai anjuran.")
            elif labels[i] == 'Obesitas':
                rekomendasi.append("Indikasi obesitas : Kurangi kalori harian dan tingkatkan aktivitas fisik.")
            elif labels[i] == 'Underweight':
                rekomendasi.append("Berat badan di bawah normal : Tambah asupan protein dan kalori sehat.")
            elif labels[i] == 'Rendah Insulin':
                rekomendasi.append("Kadar insulin rendah : Periksa lebih lanjut ke dokter untuk evaluasi metabolik.")
    return rekomendasi

"""Menerima data fitur, mengolahnya dengan scaler dan model untuk memprediksi kondisi kesehatan, lalu menampilkan status dan rekomendasi nutrisi berdasarkan hasil prediksi tersebut."""

# Mendefinisikan nilai masing-masing fitur secara terpisah sesuai urutan fitur
pregnancies = 2
glucose = 165
blood_pressure = 55
skin_thickness = 20
insulin = 10
bmi = 10.0
diabetes_pedigree_function = 0.3
age = 45

# Membuat array sample dari variabel-variabel di atas
sample = np.array([[pregnancies, glucose, blood_pressure, skin_thickness,
                    insulin, bmi, diabetes_pedigree_function, age]])

sample_scaled = scaler.transform(sample)
pred = model.predict(sample_scaled)[0]

# Daftar label
labels = ['Hipoglikemia', 'Hiperglikemia', 'Rendah_TekananDarah',
          'Obesitas', 'Underweight', 'Rendah_Insulin']

# Print Results dengan menampilkan label beserta prediksi biner
print("\nStatus Prediksi (0 = normal, 1 = perlu perhatian):")
for label, status_prediksi in zip(labels, (pred >= 0.5).astype(int)):
    print(f"{label}: {status_prediksi}")

# Menampilkan rekomendasi nutrisi berdasarkan kondisi yang terdeteksi
print("\nRekomendasi Nutrisi Berdasarkan Kondisi:")
for r in make_recommendation(pred):
    print("-", r)